<?php

namespace App\Console\Commands;

use App\Models\Exchange;
use Illuminate\Console\Command;

class InitExchanges extends Command
{
    protected $signature = 'pairs:init-exchanges';
    protected $description = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂ —Å –∏—Ö API URL';

    private const EXCHANGES = [
        [
            'name' => 'MEXC',
            'api_base_url' => 'https://api.mexc.com',
            'spot_api_url' => 'https://api.mexc.com/api/v3/ticker/price',
            'futures_api_url' => 'https://contract.mexc.com/api/v1/contract/ticker',
            'kline_api_url' => 'https://api.mexc.com/api/v3/klines',
            'is_active' => true,
        ],
        [
            'name' => 'Bybit',
            'api_base_url' => 'https://api.bybit.com',
            'spot_api_url' => 'https://api.bybit.com/v5/market/tickers?category=spot',
            'futures_api_url' => 'https://api.bybit.com/v5/market/tickers?category=linear',
            'kline_api_url' => 'https://api.bybit.com/v5/market/kline?category=spot',
            'is_active' => true,
        ],
        [
            'name' => 'BingX',
            'api_base_url' => 'https://open-api.bingx.com',
            'spot_api_url' => 'https://open-api.bingx.com/openApi/api/v3/market/ticker',
            'futures_api_url' => 'https://open-api.bingx.com/openApi/api/v3/market/ticker?type=PERPETUAL',
            'kline_api_url' => 'https://open-api.bingx.com/openApi/api/v3/market/kline',
            'is_active' => true,
        ],
        [
            'name' => 'CoinEx',
            'api_base_url' => 'https://api.coinex.com',
            'spot_api_url' => 'https://api.coinex.com/v2/market/ticker',
            'futures_api_url' => 'https://api.coinex.com/perpetual/v2/market/ticker',
            'kline_api_url' => 'https://api.coinex.com/v2/market/kline',
            'is_active' => true,
        ],
    ];

    public function handle(): void
    {
        $this->info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∏—Ä–∂...');

        foreach (self::EXCHANGES as $exchangeData) {
            $exchange = Exchange::firstOrCreate(
                ['name' => $exchangeData['name']],
                $exchangeData
            );

            if ($exchange->wasRecentlyCreated) {
                $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∏—Ä–∂–∞: {$exchangeData['name']}");
            } else {
                $exchange->update($exchangeData);
                $this->info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –±–∏—Ä–∂–∞: {$exchangeData['name']}");
            }
        }

        $this->info('‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $this->newLine();
        $this->table(
            ['–ë–∏—Ä–∂–∞', '–ë–∞–∑–æ–≤—ã–π URL', '–°—Ç–∞—Ç—É—Å'],
            Exchange::all()->map(fn($exchange) => [
                $exchange->name,
                $exchange->api_base_url,
                $exchange->is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
            ])
        );
    }
}
