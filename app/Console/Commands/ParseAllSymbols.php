<?php

namespace App\Console\Commands;

use App\Models\CurrencyPair;
use App\Models\Exchange;
use App\Models\ExchangePair;
use App\Parsers\ExchangeParserFactory;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class ParseAllSymbols extends Command
{
    protected $signature = 'pairs:parse-symbols {--exchange= : –ü–∞—Ä—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –±–∏—Ä–∂—É}';
    protected $description = '–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å –±–∏—Ä–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö';

    private ExchangeParserFactory $parserFactory;

    public function __construct(ExchangeParserFactory $parserFactory)
    {
        parent::__construct();
        $this->parserFactory = $parserFactory;
    }

    public function handle(): void
    {
        $this->info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –±–∏—Ä–∂ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ ExchangePair)...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ ExchangePair
        $exchangePairs = ExchangePair::getActivePairsForArbitrage();

        if ($exchangePairs->isEmpty()) {
            $this->error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä—ã –≤ ExchangePair!");
            return;
        }

        $this->info("üìä –ù–∞–π–¥–µ–Ω–æ {$exchangePairs->count()} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞");

        $totalSymbols = 0;
        $successfulSymbols = 0;
        $failedSymbols = 0;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –±–∏—Ä–∂–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        $pairsByExchange = $exchangePairs->groupBy('exchange_id');

        foreach ($pairsByExchange as $exchangeId => $pairs) {
            $exchange = Exchange::find($exchangeId);
            if (!$exchange || !$exchange->is_active) {
                $this->warn("‚ö†Ô∏è  –ë–∏—Ä–∂–∞ —Å ID {$exchangeId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                continue;
            }

            $this->info("üîÑ –ü–∞—Ä—Å–∏–º –ø–∞—Ä—ã —Å –±–∏—Ä–∂–∏ {$exchange->name}...");

            try {
                if (!$this->parserFactory->hasParser($exchange->name)) {
                    $this->warn("‚ö†Ô∏è  –ü–∞—Ä—Å–µ—Ä –¥–ª—è –±–∏—Ä–∂–∏ {$exchange->name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                    continue;
                }

                $parser = $this->parserFactory->createParser($exchange);

                foreach ($pairs as $exchangePair) {
                    $totalSymbols++;

                    try {
                        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
                        $ticker = $parser->getTicker($exchangePair->symbol_on_exchange);

                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω
                        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É prices

                        $successfulSymbols++;
                        $this->line("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–∞—Ä–∞: {$exchangePair->symbol_on_exchange} (Ask: {$ticker['ask']}, Bid: {$ticker['bid']})");
                    } catch (\Exception $e) {
                        $failedSymbols++;
                        $this->warn("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã {$exchangePair->symbol_on_exchange}: {$e->getMessage()}");
                    }
                }
            } catch (\Exception $e) {
                $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–∏—Ä–∂–∏ {$exchange->name}: {$e->getMessage()}");
                Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–∏—Ä–∂–∏ {$exchange->name}", [
                    'exchange' => $exchange->name,
                    'exception' => $e->getMessage(),
                ]);
            }
        }

        $this->newLine();
        $this->info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä', $totalSymbols],
                ['–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', $successfulSymbols],
                ['–û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏', $failedSymbols],
                ['–í—Å–µ–≥–æ –ø–∞—Ä –≤ ExchangePair', ExchangePair::count()],
                ['–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –≤ ExchangePair', ExchangePair::where('is_active', true)->count()],
            ]
        );

        $this->info('‚ú® –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!');
    }
}
