<?php

namespace App\Console\Commands;

use App\Services\ArbitrageAnalysisService;
use App\Services\NotificationService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class ArbitrageAnalysis extends Command
{
    protected $signature = 'pairs:arbitrage-analysis {--test : –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ}';
    protected $description = '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –∞–Ω–∞–ª–∏–∑, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';

    private ArbitrageAnalysisService $analysisService;
    private NotificationService $notificationService;

    public function __construct(
        ArbitrageAnalysisService $analysisService,
        NotificationService $notificationService
    ) {
        parent::__construct();
        $this->analysisService = $analysisService;
        $this->notificationService = $notificationService;
    }

    public function handle(): void
    {
        $this->info('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if ($this->option('test')) {
            $this->sendTestMessage();
            return;
        }

        try {
            // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            $this->info('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...');
            $opportunities = $this->analysisService->analyzeArbitrage();

            if (empty($opportunities)) {
                $this->info('üìä –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            $this->info("üìä –ù–∞–π–¥–µ–Ω–æ " . count($opportunities) . " –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π");

            // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑—É
            $this->info('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
            $saved = $this->analysisService->saveOpportunities($opportunities);
            $this->info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {$saved} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π");

            // 3. –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
            $this->info('üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–∞...');
            $alertOpportunities = $this->analysisService->getOpportunitiesForAlert();

            if ($alertOpportunities->isEmpty()) {
                $this->info('üì¢ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∞–ª–µ—Ä—Ç–∞');
                return;
            }

            $this->info("üì¢ –ù–∞–π–¥–µ–Ω–æ {$alertOpportunities->count()} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∞–ª–µ—Ä—Ç–∞");

            // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
            $this->info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã...');
            $sentCount = $this->notificationService->sendArbitrageAlerts($alertOpportunities);

            $this->info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {$sentCount} –∞–ª–µ—Ä—Ç–æ–≤");

            // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            $this->newLine();
            $this->info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:');
            $this->table(
                ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                [
                    ['–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π', count($opportunities)],
                    ['–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î', $saved],
                    ['–ì–æ—Ç–æ–≤–æ –¥–ª—è –∞–ª–µ—Ä—Ç–∞', $alertOpportunities->count()],
                    ['–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤', $sentCount],
                ]
            );
        } catch (\Exception $e) {
            $error = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {$e->getMessage()}";
            $this->error("‚ùå {$error}");
            Log::error($error, ['exception' => $e]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            $this->notificationService->sendErrorMessage($error);
        }

        $this->info('‚ú® –ê–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à—ë–Ω!');
    }

    private function sendTestMessage(): void
    {
        $this->info('üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');

        $success = $this->notificationService->sendTestMessage();

        if ($success) {
            $this->info('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }
    }
}
