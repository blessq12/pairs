<?php

namespace App\Services;

use App\Models\Setting;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TelegramService
{
    private string $botToken;
    private string $chatId;
    private string $messageTemplate;

    public function __construct()
    {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ fallback
        $this->botToken = Setting::get('telegram_bot_token', config('services.telegram.bot_token', ''));
        $this->chatId = Setting::get('telegram_chat_id', config('services.telegram.chat_id', ''));
        $this->messageTemplate = Setting::get('telegram_message_template', '–ü–∞—Ä–∞ {pair}: –ø—Ä–æ—Ñ–∏—Ç {profit}% –Ω–∞ {exchange}');
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     */
    public function sendMessage(string $message): bool
    {
        if (empty($this->botToken) || empty($this->chatId)) {
            Log::warning('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞');
            return false;
        }

        try {
            $response = Http::timeout(30)->post("https://api.telegram.org/bot{$this->botToken}/sendMessage", [
                'chat_id' => $this->chatId,
                'text' => $message,
                'parse_mode' => 'HTML',
                'disable_web_page_preview' => true,
            ]);

            if ($response->successful()) {
                Log::info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram', ['message' => $message]);
                return true;
            } else {
                Log::error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram', [
                    'status' => $response->status(),
                    'body' => $response->body(),
                    'message' => $message
                ]);
                return false;
            }
        } catch (\Exception $e) {
            Log::error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram', [
                'exception' => $e->getMessage(),
                'message' => $message
            ]);
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
     */
    public function sendArbitrageAlert(array $opportunity): bool
    {
        $message = $this->formatArbitrageMessage($opportunity);
        return $this->sendMessage($message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
     */
    public function sendArbitrageSummary(array $opportunities): bool
    {
        if (empty($opportunities)) {
            return true; // –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        }

        $message = $this->formatArbitrageSummary($opportunities);
        return $this->sendMessage($message);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
     */
    private function formatArbitrageMessage(array $opportunity): string
    {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏—Ä–∂ –∏–∑ ID
        $buyExchange = \App\Models\Exchange::find($opportunity['buy_exchange_id'])->name;
        $sellExchange = \App\Models\Exchange::find($opportunity['sell_exchange_id'])->name;
        $pair = $opportunity['base_currency'] . '/' . $opportunity['quote_currency'];
        $netProfit = round($opportunity['net_profit_percent'], 2);
        $profitUsd = round($opportunity['profit_usd'], 2);
        $buyPrice = $opportunity['buy_price'];
        $sellPrice = $opportunity['sell_price'];
        $volumeBuy = round($opportunity['volume_24h_buy'], 2);
        $volumeSell = round($opportunity['volume_24h_sell'], 2);
        $minVolume = round($opportunity['min_volume_usd'], 2);

        $message = "üö® <b>–ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨</b>\n\n";
        $message .= "üí∞ <b>–ü–∞—Ä–∞:</b> {$pair}\n";
        $message .= "üìà <b>–ü—Ä–æ—Ñ–∏—Ç:</b> {$netProfit}% (\$" . $profitUsd . ")\n\n";
        $message .= "üõí <b>–ü–æ–∫—É–ø–∫–∞:</b> {$buyExchange} –ø–æ \$" . $buyPrice . "\n";
        $message .= "üõçÔ∏è <b>–ü—Ä–æ–¥–∞–∂–∞:</b> {$sellExchange} –ø–æ \$" . $sellPrice . "\n\n";
        $message .= "üìä <b>–ö–æ–º–∏—Å—Å–∏–∏:</b> " . round($opportunity['total_commission'] * 100, 2) . "%\n";
        $message .= "üìà <b>–û–±—ä–µ–º—ã 24—á:</b>\n";
        $message .= "   ‚Ä¢ {$buyExchange}: \${$volumeBuy}\n";
        $message .= "   ‚Ä¢ {$sellExchange}: \${$volumeSell}\n";
        $message .= "   ‚Ä¢ –ú–∏–Ω–∏–º—É–º: \${$minVolume}\n\n";
        $message .= "‚è∞ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:</b> " . now()->format('H:i:s') . "\n\n";
        $message .= "üîó <b>–î–µ–π—Å—Ç–≤—É–π –±—ã—Å—Ç—Ä–æ!</b>";

        return $message;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
     */
    private function formatArbitrageSummary(array $opportunities): string
    {
        $totalCount = count($opportunities);
        $totalProfit = array_sum(array_column($opportunities, 'profit_usd'));
        $avgProfit = $totalCount > 0 ? $totalProfit / $totalCount : 0;

        $message = "üö® <b>–ê–†–ë–ò–¢–†–ê–ñ–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò</b>\n\n";
        $message .= "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n";
        $message .= "   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {$totalCount}\n";
        $message .= "   ‚Ä¢ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: \$" . round($totalProfit, 2) . "\n";
        $message .= "   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: \$" . round($avgProfit, 2) . "\n\n";
        $message .= "üìã <b>–î–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º:</b>\n\n";

        foreach ($opportunities as $index => $opportunity) {
            $buyExchange = \App\Models\Exchange::find($opportunity['buy_exchange_id'])->name;
            $sellExchange = \App\Models\Exchange::find($opportunity['sell_exchange_id'])->name;
            $pair = $opportunity['base_currency'] . '/' . $opportunity['quote_currency'];
            $netProfit = round($opportunity['net_profit_percent'], 2);
            $profitUsd = round($opportunity['profit_usd'], 2);

            $message .= ($index + 1) . ". <b>{$pair}</b>\n";
            $message .= "   üí∞ –ü—Ä–æ—Ñ–∏—Ç: {$netProfit}% (\$" . $profitUsd . ")\n";
            $message .= "   üõí {$buyExchange} ‚Üí üõçÔ∏è {$sellExchange}\n";
            $message .= "   üíµ –¶–µ–Ω—ã: \$" . $opportunity['buy_price'] . " ‚Üí \$" . $opportunity['sell_price'] . "\n\n";
        }

        $message .= "‚è∞ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:</b> " . now()->format('H:i:s') . "\n";
        $message .= "üîó <b>–î–µ–π—Å—Ç–≤—É–π –±—ã—Å—Ç—Ä–æ!</b>";

        return $message;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public function sendTestMessage(): bool
    {
        $message = "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n";
        $message .= "–°–∏—Å—Ç–µ–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n";
        $message .= "‚è∞ " . now()->format('Y-m-d H:i:s');

        return $this->sendMessage($message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    public function sendErrorMessage(string $error): bool
    {
        $message = "‚ùå <b>–û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n";
        $message .= "{$error}\n\n";
        $message .= "‚è∞ " . now()->format('Y-m-d H:i:s');

        return $this->sendMessage($message);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
     */
    public function isConfigured(): bool
    {
        return !empty($this->botToken) && !empty($this->chatId);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
     */
    public function updateSettings(string $botToken, string $chatId, ?string $messageTemplate = null): bool
    {
        try {
            Setting::set('telegram_bot_token', $botToken);
            Setting::set('telegram_chat_id', $chatId);

            if ($messageTemplate !== null) {
                Setting::set('telegram_message_template', $messageTemplate);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            $this->botToken = $botToken;
            $this->chatId = $chatId;
            if ($messageTemplate !== null) {
                $this->messageTemplate = $messageTemplate;
            }

            // –û—á–∏—â–∞–µ–º –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
            Setting::flushCache();

            Log::info('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω—ã', [
                'bot_token_length' => strlen($botToken),
                'chat_id' => $chatId,
            ]);

            return true;
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram', [
                'exception' => $e->getMessage(),
            ]);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
     */
    public function getSettings(): array
    {
        return [
            'bot_token' => $this->botToken ? '***' . substr($this->botToken, -4) : '',
            'chat_id' => $this->chatId,
            'message_template' => $this->messageTemplate,
            'is_configured' => $this->isConfigured(),
        ];
    }
}
