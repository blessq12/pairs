<?php

namespace App\Services;

use App\Models\ArbitrageOpportunity;
use App\Models\Exchange;
use App\Models\ExchangePair;
use App\Models\Setting;
use App\Parsers\ExchangeParserFactory;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;

class ArbitrageAnalysisService
{
    private ExchangeParserFactory $parserFactory;

    public function __construct(ExchangeParserFactory $parserFactory)
    {
        $this->parserFactory = $parserFactory;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
     */
    public function analyzeArbitrage(): array
    {
        $this->info('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ ExchangePair
        $exchangePairs = ExchangePair::getActivePairsForArbitrage();

        if ($exchangePairs->isEmpty()) {
            $this->info('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞');
            return [];
        }

        $this->info("üìä –ù–∞–π–¥–µ–Ω–æ {$exchangePairs->count()} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
        
        // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–∞—Ä
        foreach ($exchangePairs as $pair) {
            $this->info("  - {$pair->exchange->name}: {$pair->base_currency}/{$pair->quote_currency} ({$pair->symbol_on_exchange})");
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ —Å–∏–º–≤–æ–ª—É (base_currency + quote_currency)
        $pairsBySymbol = $exchangePairs->groupBy(function ($pair) {
            return strtoupper($pair->base_currency . $pair->quote_currency);
        });

        $minProfit = Setting::get('min_profit_percent', 2.0);
        $minVolume = Setting::get('min_volume_usd', 100.0);

        $opportunities = [];
        $totalAnalyzed = 0;

        foreach ($pairsBySymbol as $symbol => $pairsForSymbol) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä–∞ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º –Ω–∞ 2 –±–∏—Ä–∂–∞—Ö
            if ($pairsForSymbol->count() < 2) {
                continue;
            }

            $this->info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—É {$symbol} –Ω–∞ {$pairsForSymbol->count()} –±–∏—Ä–∂–∞—Ö");

            $symbolOpportunities = $this->analyzeSymbol($pairsForSymbol, $minProfit, $minVolume);
            $opportunities = array_merge($opportunities, $symbolOpportunities);
            $totalAnalyzed++;
        }

        $this->info("üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {$totalAnalyzed} –ø–∞—Ä, –Ω–∞–π–¥–µ–Ω–æ " . count($opportunities) . " –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π");

        return $opportunities;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É –Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
     */
    private function analyzeSymbol(Collection $pairsForSymbol, float $minProfit, float $minVolume): array
    {
        $opportunities = [];
        $baseCurrency = $pairsForSymbol->first()->base_currency;
        $quoteCurrency = $pairsForSymbol->first()->quote_currency;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –±–∏—Ä–∂–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        $pairsByExchange = $pairsForSymbol->groupBy('exchange_id');

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ
        $priceMatrix = [];
        foreach ($pairsByExchange as $exchangeId => $pairsForExchange) {
            $exchange = $pairsForExchange->first()->exchange;

            try {
                if (!$this->parserFactory->hasParser($exchange->name)) {
                    $this->info("‚ö†Ô∏è  –ü–∞—Ä—Å–µ—Ä –¥–ª—è –±–∏—Ä–∂–∏ {$exchange->name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                    continue;
                }

                $parser = $this->parserFactory->createParser($exchange);
                $exchangePair = $pairsForExchange->first();

                // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                $ticker = $parser->getTicker($exchangePair->symbol_on_exchange);

                $priceMatrix[$exchangeId] = [
                    'bid' => $ticker['bid'],
                    'ask' => $ticker['ask'],
                    'exchange' => $exchange,
                    'exchange_pair' => $exchangePair,
                ];

                $this->info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {$exchange->name}: Bid={$ticker['bid']}, Ask={$ticker['ask']}");
            } catch (\Exception $e) {
                $this->info("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å {$exchange->name}: {$e->getMessage()}");
                continue;
            }
        }

        if (count($priceMatrix) < 2) {
            $this->info("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–µ–Ω –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –ø–æ –ø–∞—Ä–µ {$baseCurrency}{$quoteCurrency}");
            return [];
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∏—Ä–∂
        $exchangeIds = array_keys($priceMatrix);
        for ($i = 0; $i < count($exchangeIds); $i++) {
            for ($j = $i + 1; $j < count($exchangeIds); $j++) {
                $buyExchangeId = $exchangeIds[$i];
                $sellExchangeId = $exchangeIds[$j];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π, –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π
                $opportunity1 = $this->calculateOpportunity(
                    $baseCurrency,
                    $quoteCurrency,
                    $priceMatrix[$buyExchangeId],
                    $priceMatrix[$sellExchangeId],
                    $buyExchangeId,
                    $sellExchangeId,
                    $minProfit,
                    $minVolume
                );

                if ($opportunity1) {
                    $opportunities[] = $opportunity1;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                $opportunity2 = $this->calculateOpportunity(
                    $baseCurrency,
                    $quoteCurrency,
                    $priceMatrix[$sellExchangeId],
                    $priceMatrix[$buyExchangeId],
                    $sellExchangeId,
                    $buyExchangeId,
                    $minProfit,
                    $minVolume
                );

                if ($opportunity2) {
                    $opportunities[] = $opportunity2;
                }
            }
        }

        return $opportunities;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –±–∏—Ä–∂–∞–º–∏
     */
    private function calculateOpportunity(
        string $baseCurrency,
        string $quoteCurrency,
        array $buyPrice,
        array $sellPrice,
        int $buyExchangeId,
        int $sellExchangeId,
        float $minProfit,
        float $minVolume
    ): ?array {
        $buyPriceValue = $buyPrice['ask']; // –ü–æ–∫—É–ø–∞–µ–º –ø–æ ask
        $sellPriceValue = $sellPrice['bid']; // –ü—Ä–æ–¥–∞—ë–º –ø–æ bid

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç
        $profitPercent = (($sellPriceValue - $buyPriceValue) / $buyPriceValue) * 100;

        $this->info("üí∞ {$baseCurrency}{$quoteCurrency}: {$buyPrice['exchange']->name} -> {$sellPrice['exchange']->name}, –ø—Ä–æ—Ñ–∏—Ç: {$profitPercent}%");

        if ($profitPercent <= 0) {
            $this->info("‚ùå –ù–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è {$baseCurrency}{$quoteCurrency}");
            return null; // –ù–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ exchange_pairs
        $buyCommission = $buyPrice['exchange_pair']->taker_fee ?? $this->getDefaultCommission($buyPrice['exchange']->name);
        $sellCommission = $sellPrice['exchange_pair']->taker_fee ?? $this->getDefaultCommission($sellPrice['exchange']->name);
        $totalCommission = $buyCommission + $sellCommission;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π
        $netProfitPercent = $profitPercent - ($totalCommission * 100);

        $this->info("üí± –ö–æ–º–∏—Å—Å–∏–∏: {$buyPrice['exchange']->name}=" . ($buyCommission * 100) . "% + {$sellPrice['exchange']->name}=" . ($sellCommission * 100) . "% = " . ($totalCommission * 100) . "%");
        $this->info("üìä –ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: {$netProfitPercent}% (–º–∏–Ω–∏–º—É–º {$minProfit}%)");

        if ($netProfitPercent < $minProfit) {
            $this->info("‚ùå –ü—Ä–æ—Ñ–∏—Ç –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–ª—è {$baseCurrency}{$quoteCurrency}");
            return null; // –ü—Ä–æ—Ñ–∏—Ç –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç –≤ USD (–ø—Ä–∏ –æ–±—ä—ë–º–µ $1000)
        $profitUsd = ($netProfitPercent / 100) * 1000;

        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        $volume24hBuy = $minVolume;
        $volume24hSell = $minVolume;

        $this->info("üìà –û–±—ä–µ–º—ã: {$buyPrice['exchange']->name}=${volume24hBuy}$ {$sellPrice['exchange']->name}=${volume24hSell}$ (–º–∏–Ω–∏–º—É–º {$minVolume}$)");

        return [
            'buy_exchange_id' => $buyExchangeId,
            'sell_exchange_id' => $sellExchangeId,
            'base_currency' => $baseCurrency,
            'quote_currency' => $quoteCurrency,
            'buy_price' => $buyPriceValue,
            'sell_price' => $sellPriceValue,
            'profit_percent' => $profitPercent,
            'profit_usd' => $profitUsd,
            'volume_24h_buy' => $volume24hBuy,
            'volume_24h_sell' => $volume24hSell,
            'min_volume_usd' => $minVolume,
            'buy_commission' => $buyCommission,
            'sell_commission' => $sellCommission,
            'total_commission' => $totalCommission,
            'net_profit_percent' => $netProfitPercent,
            'is_active' => true,
            'detected_at' => now(),
        ];
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –±–∏—Ä–∂–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    private function getDefaultCommission(string $exchangeName): float
    {
        $commissionKey = strtolower($exchangeName) . '_commission';
        return Setting::get($commissionKey, 0.001); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.1%
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    public function saveOpportunities(array $opportunities): int
    {
        if (empty($opportunities)) {
            return 0;
        }

        $this->info("üíæ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å " . count($opportunities) . " –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π");

        $saved = 0;
        foreach ($opportunities as $opportunityData) {
            try {
                $this->info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º: {$opportunityData['buy_exchange_id']} -> {$opportunityData['sell_exchange_id']} –¥–ª—è –ø–∞—Ä—ã {$opportunityData['base_currency']}{$opportunityData['quote_currency']}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                $existing = ArbitrageOpportunity::where([
                    'buy_exchange_id' => $opportunityData['buy_exchange_id'],
                    'sell_exchange_id' => $opportunityData['sell_exchange_id'],
                    'base_currency' => $opportunityData['base_currency'],
                    'quote_currency' => $opportunityData['quote_currency'],
                ])
                    ->where('is_active', true)
                    ->first();

                if ($existing) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                    $existing->update($opportunityData);
                    $this->info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å");
                } else {
                    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                    ArbitrageOpportunity::create($opportunityData);
                    $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å");
                }

                $saved++;
            } catch (\Exception $e) {
                $this->info("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " . $e->getMessage());
                Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', [
                    'data' => $opportunityData,
                    'exception' => $e
                ]);
            }
        }

        return $saved;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
     */
    public function getOpportunitiesForAlert(): Collection
    {
        return ArbitrageOpportunity::active()
            ->profitable()
            ->withVolume()
            ->readyForAlert()
            ->with(['buyExchange', 'sellExchange'])
            ->orderByDesc('net_profit_percent')
            ->get();
    }

    private function info(string $message): void
    {
        echo $message . PHP_EOL;
        Log::info($message);
    }
}
